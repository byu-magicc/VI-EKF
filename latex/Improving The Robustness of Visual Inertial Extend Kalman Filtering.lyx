#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass tufte-book
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Improving the Robustness of Visual-Inertial Extended Kalman Filtering
\end_layout

\begin_layout Author
James Jackson, Tim Mclain
\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\xhat}{\mathbf{\hat{\mathbf{x}}}}
{\hat{\mathbf{x}}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\dxhat}{\hat{\dot{\mathbf{x}}}}
{\mathbf{\dot{\mathbf{x}}}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\x}{\mathbf{x}}
{\mathbf{x}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\z}{\mathbf{z}}
{\mathbf{z}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\i}{\mathbf{i}}
{\mathbf{i}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\j}{\mathbf{j}}
{\mathbf{j}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\k}{\mathbf{k}}
{\mathbf{k}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\u}{\mathbf{u}}
{\mathbf{u}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\norm}[1]{\left\Vert #1\right\Vert }
{\left\Vert #1\right\Vert }
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\skew}[1]{\left\lfloor #1\right\rfloor }
{\left\lfloor #1\right\rfloor }
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Itemize
visual inertial navigation methods have been shown to be effective ways
 to operate autonomously without GPS or other global sensors
\end_layout

\begin_layout Itemize
features tracked through image frames can be used to constrain drift of
 IMU and rate gyroscopes
\end_layout

\begin_layout Itemize
A camera paired with an IMU can be a low-cost, effective way to navigate
 without GPS
\end_layout

\begin_layout Itemize
Recent results have shown promising results, but have been known to have
 sometimes catastrophic failure modes.
\end_layout

\begin_layout Itemize
There is a need for increased robustness in visual-inertial estimation technique
s.
\end_layout

\begin_layout Itemize
one problem is that measurements to observed features are not typically
 relative to a known origin
\end_layout

\begin_layout Itemize
This can cause observability and consistency issues in estimation approaches
 which assume that they are.
\end_layout

\begin_layout Itemize
Recent methods have shown how to estimate features in the camera frame,
 rather than an inertial frame.
\end_layout

\begin_layout Itemize
This parameterization partitions the states cleanly into observable and
 non-observable states, with global position and heading being completely
 unobservable.
\end_layout

\begin_layout Itemize
Wheeler shows how to periodically reset the position and heading states
 such that they remain observable and consistent, and more sophisticated
 methods are used for global uncertainty reconstruction
\end_layout

\begin_layout Itemize
Another problem faced in visual inertial filtering includes estimating states
 which are only partially observable, such as IMU biases or depth to features.
\end_layout

\begin_layout Itemize
Brink has shown that using a partial update can improve filter robustness
 to these 
\begin_inset Quotes eld
\end_inset

nuisance
\begin_inset Quotes erd
\end_inset

 states while maintaining consistency.
\end_layout

\begin_layout Itemize
Finally, many visual-inertial estimation approaches assume no knowledge
 about system dynamics.
 For some applications, knowledge of system dynamics can help improve estimation
 accuracy and constrain divergence in some modes (a multirotor is unlikely
 to be flying at a million miles per hour, therefore depth to features is
 unlikely to run to infinity)
\end_layout

\begin_layout Itemize
Leishman has shown a method for incorporating a linear drag model into multiroto
r dynamics, which dramatically improves the estimation accuracy and robustness.
\end_layout

\begin_layout Itemize
In this work, we incorporate a relative reset and partial update to a robocentri
c visual-inertial kalman filtering approach.
 
\end_layout

\begin_layout Itemize
We will first discuss the derivation of the filter including a new keyframe
 reset step and inline partial update formulation.
\end_layout

\begin_layout Itemize
Then, we will demonstrate this filter on a hardware dataset of a MAV flying
 in a motion capture room and compare results with and without the use of
 a multirotor drag dynamic approximation.
\end_layout

\begin_layout Section
Notation
\end_layout

\begin_layout Standard
We will use the following notation
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\begin{aligned}q_{I}^{b} & \quad\textrm{Quaternion describing rotation from the inertial frame to the body frame}\\
v_{b/I}^{b} & \quad\textrm{velocity of the body frame, with respect to the inertial frame, expressed in the body frame}\\
p_{b/I}^{I} & \quad\textrm{position of the body, with respect to the inertial frame, expressed in the inertial frame}\\
\zeta_{i/c}^{c} & \quad\mbox{unit vector directed at feature \ensuremath{i} from the camera origin, expressed in the camera frame}\\
q_{c}^{\zeta_{i}} & \quad\mbox{quaternion which describes the rotation from the camera z axis to the unit vector \ensuremath{\zeta_{i/c}^{c}}}\\
\i,\j,\k & \quad\mbox{the orthogonal unit vectors describing the standard \ensuremath{x,y,z,}basis for a coordinate frame}
\end{aligned}
\]

\end_inset


\end_layout

\begin_layout Standard
We will also make extensive use of the skew-symmetric matrix, defined as
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\left\lfloor v\right\rfloor =\left[\begin{array}{ccc}
0 & -v_{3} & v_{2}\\
v_{3} & 0 & -v_{1}\\
-v_{2} & v_{1} & 0
\end{array}\right]
\]

\end_inset


\end_layout

\begin_layout Standard
and is related to the cross-product between two vectors, that is
\begin_inset Formula 
\[
v\times w=\left\lfloor v\right\rfloor w
\]

\end_inset


\end_layout

\begin_layout Subsection
Quaternions
\end_layout

\begin_layout Standard
We will use standard Hamiltonian Notation for quaternions:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
q=q_{w}+q_{x}\i+q_{y}\j+q_{z}\k=\begin{bmatrix}q_{w} & \bar{q}^{\top}\end{bmatrix}^{\top},
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where quaternion multiplication is defined as
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
p\otimes q=\begin{bmatrix}p_{w} & -\bar{p}^{\top}\\
\bar{p} & p_{w}I+\left\lfloor \bar{p}\right\rfloor 
\end{bmatrix}\begin{bmatrix}q_{w}\\
\bar{q}
\end{bmatrix}.
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Formula $3\times3$
\end_inset

 rotation matrix based on a quaternion is defined as
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
R\left(q\right)=\left(2q_{w}^{2}-1\right)I-2q_{w}\left\lfloor \bar{q}\right\rfloor +2\bar{q}\bar{q}^{\top}\in\mathbb{R}^{3\times3},
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
and is defined as a passive rotation.
 That is, 
\begin_inset Formula $R\left(q_{i}^{b}\right)r$
\end_inset

 results in the original vector 
\begin_inset Formula $r$
\end_inset

 expressed in the new coordinate frame 
\begin_inset Formula $i$
\end_inset

.
 The transpose of the rotation matrix results in an active rotation, where
 
\begin_inset Formula $R\left(q_{i}^{b}\right)^{\top}r$
\end_inset

 results in a new rotated version of vector 
\begin_inset Formula $r$
\end_inset

, expressed in the original frame.
\end_layout

\begin_layout Standard
The exponential mapping for a quaternion is defined as 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\exp\left(\delta\right)=\begin{bmatrix}q_{w}\\
\bar{q}
\end{bmatrix}=\begin{bmatrix}\cos\left(\frac{\lVert\delta\rVert}{2}\right)\\
\sin\left(\frac{\lVert\delta\rVert}{2}\right)\frac{\delta}{\lVert\delta\rVert}
\end{bmatrix},
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\log\left(q\right)=2\mathrm{atan2}\left(\left\Vert \bar{q}\right\Vert ,q_{w}\right)\frac{\bar{q}}{\left\Vert \bar{q}\right\Vert },
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
with the small-angle approximations (when 
\begin_inset Formula $\norm{\delta}<10^{-4}$
\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\exp\left(\delta\right) & \approx & \left[\begin{array}{c}
1\\
\frac{\delta}{2}
\end{array}\right]\\
\log\left(q\right) & \approx & 2\textrm{sign}\left(q_{w}\right)\bar{q}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset Formula $\boxplus$
\end_inset

 and 
\begin_inset Formula $\boxminus$
\end_inset

 operators
\end_layout

\begin_layout Standard
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

Introduces a new syntax to simplify working with the manifold representation
 of Lie Groups and introduced the 
\begin_inset Formula $\boxplus$
\end_inset

 and 
\begin_inset Formula $\boxminus$
\end_inset

 operators.
 We will use this syntax.
 One common application of this syntax can be seen below in the descretized
 quaternion dynamics (where 
\begin_inset Formula $\theta=\omega dt$
\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
q_{t+1} & = & q_{t}\boxplus\theta\\
\theta & = & q_{1}\boxminus q_{2}.
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
It is important to note that the dimensionalities of 
\begin_inset Formula $\omega$
\end_inset

 and 
\begin_inset Formula $q$
\end_inset

 are different.
 The 
\begin_inset Formula $\boxplus$
\end_inset

 and 
\begin_inset Formula $\boxminus$
\end_inset

 operators are defined for quaternions as follows:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
\boxplus: & SO\left(3\right)\times\mathbb{R}^{3} & \rightarrow SO\left(3\right),\nonumber \\
 & q,\theta & \mapsto q\otimes\exp\left(\theta\right),\\
\boxminus: & SO\left(3\right)\times SO\left(3\right) & \rightarrow\mathbb{R}^{3},\nonumber \\
 & q,p & \log\left(p\otimes q^{-1}\right).
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
This new syntax allows us to work with these parameterizations as if they
 were vectors.
 These operators become the equivalent of vector addition and subtraction,
 and therefore allow proper defintions of derivatives and integrals across
 these operators.
 A properly defined 
\begin_inset Formula $\boxplus$
\end_inset

 manifold must obey the following identies:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
 & x\boxplus0 & =x\\
\forall y\in S:\quad & x\boxplus\left(y\boxminus x\right) & =y\\
\forall\delta\in V:\quad & (x\boxplus\delta)\boxminus x & =\delta\\
\forall\delta_{1}\delta_{1}\in\mathbb{R}^{n}:\quad & \lVert(x\boxplus\delta_{1})\boxminus(x\boxplus\delta_{2})\rVert & \leq\lVert\delta_{1}-\delta_{2}\rVert
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
These operators must also form a diffeomorphism from 
\begin_inset Formula $V$
\end_inset

 to 
\begin_inset Formula $S$
\end_inset

, so that derivatives of 
\begin_inset Formula $\delta$
\end_inset

 correspond to limits of 
\begin_inset Formula $x\boxplus\delta$
\end_inset

.
 For example, the derivative of a quaternion, as defined using the 
\begin_inset Formula $\boxplus$
\end_inset

 and 
\begin_inset Formula $\boxminus$
\end_inset

 operators are
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
\dfrac{\partial}{\partial x}q(x) & : & =\lim_{\epsilon\rightarrow0}\dfrac{q(x+\epsilon)\boxminus q(x)}{\epsilon}\\
\dfrac{\partial}{\partial q}x(q) & : & =\lim_{\epsilon\rightarrow0}\left[\begin{array}{c}
\dfrac{x\left(q\boxplus(\mathbf{i}\epsilon)\right)-x\left(q\right)}{\epsilon}\\
\dfrac{x\left(q\boxplus(\mathbf{j}\epsilon)\right)-x\left(q\right)}{\epsilon}\\
\dfrac{x\left(q\boxplus(\mathbf{k}\epsilon)\right)-x\left(q\right)}{\epsilon}
\end{array}\right]^{\top}
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
Derivatives over all 
\begin_inset Formula $\boxplus$
\end_inset

 and 
\begin_inset Formula $\boxminus$
\end_inset

 operators can be found in a similar manner.
 This allows us to use this operator to define dynamics and Jacobians across
 our non-linear manifold representations.
\end_layout

\begin_layout Standard
We can represent covariance using the 
\begin_inset Formula $\boxplus$
\end_inset

 and 
\begin_inset Formula $\boxminus$
\end_inset

 operators in the following method
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mathcal{N}\left(\mu,\Sigma\right):=\mu\boxplus\mathcal{N}\left(0,\Sigma\right)
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
It is important to note here that in many cases,
\begin_inset Formula 
\begin{align}
\mu\in\mathbb{R}^{m}\\
\Sigma\in\mathbb{R}^{n\times n}\\
m\neq n
\end{align}

\end_inset


\end_layout

\begin_layout Subsection
Feature Bearing Parameterization
\end_layout

\begin_layout Standard
As in Bloesch, we parameterize the bearing states to features in the camera
 frame as rotations in 
\begin_inset Formula $SE\left(3\right)$
\end_inset

 which describe the rotation from the camera z-axis to the bearing vector
 directed at the feature.
 Let 
\begin_inset Formula $\zeta_{i/c}^{c}$
\end_inset

 be the 3D unit vector directed at feature 
\begin_inset Formula $i$
\end_inset

, with respect to the camera frame 
\begin_inset Formula $c$
\end_inset

.
 We then define 
\begin_inset Formula $q_{c}^{\zeta_{i}}$
\end_inset

as the quaternion rotation between 
\begin_inset Formula $\mathbf{k}$
\end_inset

, the z-axis of the camera frame and the 3D unit bearing vector
\begin_inset Formula $\zeta_{i/c}^{c}$
\end_inset

.
 The change between two 3D unit vectors 
\begin_inset Formula $\zeta_{i}$
\end_inset

 and 
\begin_inset Formula $\zeta_{j}$
\end_inset

 can be described using an axis-angle representation, where the direction
 of the axis of rotation is perpendicular to both of the 3D unit vectors,
 scaled by the angle.
 This is shown in the figure below.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/superjax/dev_ws/src/vi_ekf/latex/figures/feature_diagram.eps
	width 80col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Illustration of Bearing Vector Geometry
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As can be seen in the picture, there are only 2 degrees of freedom in this
 parameterization because the axis of rotation is always in the plane normal
 to 
\begin_inset Formula $\zeta_{i}$
\end_inset

.
 Therefore, we can define a projection matrix 
\begin_inset Formula $T_{\zeta_{i}}$
\end_inset

, which reduces the dimensionality of the axis-angle representation to this
 plane.
 It is important to note the active rotation being applied in both cases.
 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
\zeta_{i/c}^{c} & = & R\left(q_{c}^{\zeta_{i}}\right)^{\top}\k\in\mathcal{S}^{2}\subset\mathbb{R}^{3}\\
T_{\zeta_{i}} & = & R\left(q_{c}^{\zeta_{i}}\right)^{\top}\left[\begin{array}{cc}
\i & \j\end{array}\right]\in\mathbb{R}^{3\times2}
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
Here are the definitions of the 
\begin_inset Formula $\boxplus$
\end_inset

 and 
\begin_inset Formula $\boxminus$
\end_inset

 operators of this space
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
\boxplus: & SO\left(3\right)\times\mathbb{R}^{2} & \rightarrow SO\left(3\right),\nonumber \\
 & q_{\zeta},\delta & \mapsto\exp(T_{\zeta}\delta)\otimes q_{\zeta},\\
\boxminus: & SO\left(3\right)\times SO\left(3\right) & \rightarrow\mathbb{R}^{2},\nonumber \\
 & q,p & \mapsto\theta T_{\zeta_{j}}^{\top}s\left(q_{\zeta_{i}},q_{\zeta_{j}}\right),
\end{eqnarray}

\end_inset

where 
\begin_inset Formula $\theta$
\end_inset

 is the angle between the two unit bearing vectors 
\begin_inset Formula $\zeta_{i}$
\end_inset

 and 
\begin_inset Formula $\zeta_{j}$
\end_inset


\begin_inset Formula 
\[
\theta=\cos^{-1}\left(\zeta_{i}^{\top}\zeta_{j}\right),
\]

\end_inset

and 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
s\left(q_{\zeta_{i}},q_{\zeta_{j}}\right)=\dfrac{\zeta_{j}\times\zeta_{i}}{\lVert\zeta_{j}\times\zeta_{i}\rVert}
\]

\end_inset

is the axis of rotation between the bearing vectors.
\end_layout

\begin_layout Standard
With only two degrees of freedom, and with all feature vectors referencing
 the camera 
\begin_inset Formula $z$
\end_inset

 axis, there are an infinite number of quaternions which can be used to
 represent the same unit vector.
 The difference between these rotations is some angle of rotation about
 the bearing vector 
\begin_inset Formula $\zeta$
\end_inset

 itself, which is removed by the projection operation and can therefore
 be neglected.
\end_layout

\begin_layout Section
Derivation
\end_layout

\begin_layout Standard
Here we will derive the relevant geometry and dynamics to fully describe
 and implement our version of the filter.
 First, we will briefly present some identities that will be helpful in
 later derivations.
\end_layout

\begin_layout Standard
Some helpful identities when dealing with skew-symmetric and rotation matrices
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\skew vw=-\skew wv
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\left\lfloor Rv\right\rfloor =R\left\lfloor v\right\rfloor R^{\top}\label{eq:skew_rotation}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
The time derivative of a rotation matrix between two arbitrary (possibly
 time varying) frames is
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\begin{aligned}\frac{d}{dt}R\left(q_{a\left(t\right)}^{b\left(t\right)}\right) & =\left\lfloor \omega_{b\left(t\right)/a\left(t\right)}^{b\left(t\right)}\right\rfloor R\left(q_{a\left(t\right)}^{b\left(t\right)}\right)\end{aligned}
,
\]

\end_inset

however, if the rotation matrix is with respect to a fixed frame, this can
 be simplified
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\begin{aligned}\frac{d}{dt}R\left(q_{a}^{b\left(t\right)}\right) & =\left\lfloor \omega_{b\left(t\right)/a}^{b\left(t\right)}\right\rfloor R\left(q_{a}^{b\left(t\right)}\right).\end{aligned}
\]

\end_inset

On the other hand, if the rotation matrix is defined with respect to a time-vary
ing frame and describes the rotation to a fixed frame, (such as in the case
 of body-fixed dynamics) we can perform some manipulation using 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:skew_rotation"

\end_inset

 to put the result into a more convenient frame
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
\frac{d}{dt}R\left(q_{b\left(t\right)}^{a}\right) & = & \left\lfloor \omega_{a/b\left(t\right)}^{a}\right\rfloor R\left(q_{b\left(t\right)}^{a}\right)\nonumber \\
 & = & \left\lfloor R\left(q_{b\left(t\right)}^{a}\right)\omega_{a/b\left(t\right)}^{b\left(t\right)}\right\rfloor R\left(q_{b\left(t\right)}^{a}\right)\nonumber \\
 & = & R\left(q_{b\left(t\right)}^{a}\right)\left\lfloor \omega_{a/b\left(t\right)}^{b\left(t\right)}\right\rfloor R\left(q_{a}^{b\left(t\right)}\right)R\left(q_{b\left(t\right)}^{a}\right)\nonumber \\
 & = & R\left(q_{b\left(t\right)}^{a}\right)\left\lfloor \omega_{a/b\left(t\right)}^{b\left(t\right)}\right\rfloor \nonumber \\
 & = & -R\left(q_{b\left(t\right)}^{a}\right)\left\lfloor \omega_{b\left(t\right)/a}^{b\left(t\right)}\right\rfloor .\label{eq:body_fixed_rotation_dynamics}
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
The derivative of a passively rotated vector, with respect to the quaternion
 describing the rotation is
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\begin{aligned}\frac{d}{dq_{a}^{b}}\left(R\left(q_{a}^{b}\right)v\right) & =-\left\lfloor R\left(q_{a}^{b}\right)v\right\rfloor ,\end{aligned}
\]

\end_inset

while the derivative of an actively rotated vector to the same is
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\begin{aligned}\frac{d}{dq_{a}^{b}}\left(R\left(q_{a}^{b}\right)^{\top}v\right) & =-\left\lfloor R\left(q_{a}^{b}\right)^{\top}v\right\rfloor \\
 & =-R\left(q_{a}^{b}\right)^{\top}\left\lfloor v\right\rfloor R\left(q_{a}^{b}\right).
\end{aligned}
\]

\end_inset


\end_layout

\begin_layout Standard
The derivative of the projection operator with respect to the feature quaternion
 to the unit vector is
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\begin{aligned}\frac{d}{dq_{c}^{\zeta}}\left(T_{\zeta}^{\top}v\right) & =\frac{d}{dq_{c}^{\zeta}}\left(\left[\begin{array}{cc}
\i & \j\end{array}\right]^{\top}R\left(q_{c}^{\zeta}\right)v\right)\\
 & =-\left[\begin{array}{cc}
\i & \j\end{array}\right]^{\top}\left\lfloor R\left(q_{c}^{\zeta}\right)v\right\rfloor \left[\begin{array}{cc}
\i & \j\end{array}\right]\\
 & =-\left[\begin{array}{cc}
\i & \j\end{array}\right]^{\top}R\left(q_{c}^{\zeta}\right)\left\lfloor v\right\rfloor R\left(q_{c}^{\zeta}\right)^{\top}\left[\begin{array}{cc}
\i & \j\end{array}\right]\\
 & =-T_{\zeta}^{\top}\left\lfloor v\right\rfloor T_{\zeta},
\end{aligned}
\]

\end_inset

and the derivative of a bearing vector with respect to the quaternion is
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\begin{aligned}\frac{d}{dq_{\zeta}^{c}}\zeta^{c} & =\frac{d}{dq_{\zeta}^{c}}\left(R\left(q_{\zeta}^{c}\right)^{\top}\k\right)\\
 & =\left\lfloor \zeta\right\rfloor T_{\zeta}.
\end{aligned}
\]

\end_inset


\end_layout

\begin_layout Subsection
State Definition
\end_layout

\begin_layout Standard
The state vector in our implementation is defined as follows with 
\begin_inset Formula $\rho_{i}$
\end_inset

 as the inverse depth to feature 
\begin_inset Formula $i$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\boldsymbol{x}=\left[p_{b/I}^{I},v_{b/I}^{b},q_{I}^{b},\beta_{a},\beta_{\omega},\mu,q_{c}^{\zeta_{0}},\rho_{0}\cdots q_{c}^{\zeta_{n}},\rho_{n}\right]^{\top}\in\mathbb{R}^{17+5n}.
\]

\end_inset


\end_layout

\begin_layout Standard
The covariance matrix 
\begin_inset Formula $P$
\end_inset

 is defined as 
\begin_inset Formula 
\[
P=E\left[\hat{\boldsymbol{x}}\boxminus\boldsymbol{x}\right]E\left[\hat{\boldsymbol{x}}\boxminus\boldsymbol{x}\right]^{\top}\in\mathbb{R}^{\left(16+3n\right)\times\left(16+3n\right)}.
\]

\end_inset


\end_layout

\begin_layout Subsection
State Dynamics
\end_layout

\begin_layout Standard
Below are the dynamics of a multirotor using a linearized drag term with
 
\begin_inset Formula $\beta_{a}$
\end_inset

and 
\begin_inset Formula $\beta_{\omega}$
\end_inset

 as the accelerometer and gyro constant biases, and 
\begin_inset Formula $\mu$
\end_inset

 as a constant linear drag term.
 For the derivation of the linear drag term, we refer to Leishman
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
\dot{p}_{bI}^{I} & = & R^{\top}\left(q_{I}^{b}\right)v_{b/I}^{b}\nonumber \\
\dot{v}_{b/I}^{b} & = & \left\lfloor v_{b/I}^{b}\right\rfloor \boldsymbol{\omega}_{b/I}^{b}+R\left(q_{I}^{b}\right)g+\k\k^{\top}\left(y_{a}-\beta_{a}\right)-\mu_{t}\left[\begin{array}{ccc}
\i & \j & 0\end{array}\right]v_{b/I}^{b}+\eta_{v}\label{eq:velocity_dynamics}\\
\dot{q}_{I}^{b} & = & \omega\nonumber \\
\dot{\beta}_{a} & = & \eta_{\beta_{a}}\nonumber \\
\dot{\beta}_{\omega} & = & \eta_{\beta_{\boldsymbol{\omega}}}\nonumber \\
\dot{\mu} & = & \eta_{\mu}d\nonumber 
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
For the derivation of the feature bearing and inverse depth dynamics, we
 refer the reader to Appendix A.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\dot{q}_{c}^{\zeta} & = & T_{\zeta}^{\top}\left(\omega_{c/I}^{c}-\rho_{i}\left\lfloor \zeta_{i}^{c}\right\rfloor v_{c/I}^{c}\right)\\
\dot{\rho} & = & \rho^{2}\zeta_{i}^{c}{}^{\top}v_{c/I}^{c}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Subsection
Continuous-Discrete EKF Equations
\end_layout

\begin_layout Standard
We will use the following formulation of the continuous-discrete EKF equations
 on the manifold with state 
\begin_inset Formula $\xhat$
\end_inset

 and input 
\begin_inset Formula $\u$
\end_inset

 and 
\begin_inset Formula $\dot{\x}=f\left(\x,\u\right)$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\begin{aligned}\xhat\left(t+dt\right) & =\xhat\left(t\right)\boxplus f\left(\xhat\left(t\right),\mathbf{\u}\left(t\right)\right)dt\\
A & =\left.\frac{\partial f}{\partial\x}\right|_{\x=\xhat\left(t\right)}\\
G & =\left.\frac{\partial f}{\partial\u}\right|_{\x=\xhat\left(t\right)}\\
P\left(t+dt\right) & =P\left(t\right)+\left(AP\left(t\right)+P\left(t\right)A^{\top}+GQ_{\u}G+Q_{\x}\right)dt
\end{aligned}
\]

\end_inset

and the following measurement update equations for a generic measurement
 
\begin_inset Formula $\mathbf{z}_{y}=h_{y}\left(\mathbf{x}\right)$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\begin{aligned}H_{y} & =\frac{\partial h_{y}}{\partial\x}\\
K & =PH_{y}^{\top}\left(R_{y}+H_{y}PH_{y}^{\top}\right)^{-1}\\
P^{+} & =(I-KH_{y})P^{-}\\
\hat{\x}^{+} & =\hat{\x}\boxplus K\left(\mathbf{z}_{y}\boxminus h_{y}\left(\hat{\x}\right)\right)
\end{aligned}
\]

\end_inset


\end_layout

\begin_layout Standard
For derivation of the Jacobians 
\begin_inset Formula $\frac{\partial f}{\partial\x}$
\end_inset

 and 
\begin_inset Formula $\frac{\partial f}{\partial\u}$
\end_inset

, we refer the reader to Appendix B.
\end_layout

\begin_layout Subsection
Measurement Models
\end_layout

\begin_layout Standard
To reduce modeling errors, we incorporate pixel measurements directly into
 our filter using the following model.
 Let us consider a pixel measurement 
\begin_inset Formula $\lambda$
\end_inset

 given focal length 
\begin_inset Formula $f$
\end_inset

 and feature bearing vector 
\begin_inset Formula $\zeta$
\end_inset

, and using the geometry showing in Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:pixel_geometry"

\end_inset

, and solve for the distance along the bearing vector to the image plane
 
\begin_inset Formula $s$
\end_inset

, we get
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\begin{aligned}\k^{\top}\left(-f\k+s\zeta\right) & =0\\
\left(\k^{\top}s\zeta\right)-f\left(\k^{\top}\k\right) & =0\\
s\left(\k^{\top}\zeta\right) & =f\left(\k^{\top}\k\right)\\
s & =\frac{f}{e_{z}\zeta}.
\end{aligned}
\]

\end_inset


\end_layout

\begin_layout Standard
If we use this scaling factor to map into pixel coordinates, (where 
\begin_inset Formula $\left(0,0\right)$
\end_inset

 is located at the top of the image, with center pixel 
\begin_inset Formula $\lambda_{c}=\left[c_{x},c_{y}\right]^{\top}$
\end_inset

 and split 
\begin_inset Formula $f$
\end_inset

 into focal lengths 
\begin_inset Formula $f_{x}$
\end_inset

 and 
\begin_inset Formula $f_{y}$
\end_inset

) we get the following expression for pixel locations given a particular
 feature bearing vector 
\begin_inset Formula $\zeta$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
h_{\lambda_{i}}(x,u,\eta_{\lambda_{i}}) & = & \left[\begin{array}{ccc}
1 & 0 & 0\\
0 & 1 & 0
\end{array}\right]s\zeta_{i}+\lambda_{c}+\eta_{\lambda_{i}}\nonumber \\
 & = & \left[\begin{array}{ccc}
f_{x} & 0 & 0\\
0 & f_{y} & 0
\end{array}\right]\frac{1}{\k\zeta_{i}}\zeta_{i}+\lambda_{c}+\eta_{\lambda_{i}}\nonumber \\
 & = & F\frac{1}{\k\zeta_{i}}\zeta_{i}+\lambda_{c}+\eta_{\lambda_{i}}.\label{eq:pixel_meas_model}
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
This model is inherently very non-linear with respect to the bearing vector.
 Therefore characterizing noise as normal about the pixel measurement then
 mapping into the bearing vector space will improve uncertainty consistency
 when compared to characterizing noise about the bearing vector itself.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/superjax/dev_ws/src/vi_ekf/latex/figures/pixel_geometry.eps
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset CommandInset label
LatexCommand label
name "fig:pixel_geometry"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Camera Pixel and feature vector geometry
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Using the multirotor drag model in 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:velocity_dynamics"

\end_inset

 provides the benefit that velocity becomes directly observed by the acceleromet
er (assuming a linear drag constant).
 To derive this fact, we start with the sum of the forces acting on the
 multirotor body.
 These are assumed to be gravity (
\begin_inset Formula $mg$
\end_inset

), thrust (
\begin_inset Formula $T$
\end_inset

) and drag (
\begin_inset Formula $\mu mv$
\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
ma_{b/I}^{b} & = & \sum F^{b}\\
 & = & R\left(q_{I}^{b}\right)mg-\mu mv_{b/i}^{b}+T\\
a_{b/I}^{b} & = & R\left(q_{I}^{b}\right)g-\mu v_{b/i}^{b}+\frac{T}{m}
\end{eqnarray*}

\end_inset

The accelerometer measures all applied accelerations, except gravity, with
 the addition of the constant bias term 
\begin_inset Formula $\beta_{a}$
\end_inset

 and noise 
\begin_inset Formula $\eta_{a}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
\z_{y} & = & a_{b/I}^{b}-R\left(q_{I}^{b}\right)g+\beta_{a}+\eta_{a}\nonumber \\
 & = & R\left(q_{I}^{b}\right)g-\mu v_{b/i}^{b}+\frac{T}{m}-R\left(q_{I}^{b}\right)g+\beta_{a}+\eta_{a}\nonumber \\
 & = & \frac{T}{m}-\mu v_{b/i}^{b}+\beta_{a}+\eta_{a}\label{eq:accel_xyz}
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
If we assume that 
\begin_inset Formula $T$
\end_inset

 acts only along the 
\begin_inset Formula $\k$
\end_inset

 axis, then we can remove its influence by considering only the 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 axes of 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:accel_xyz"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
h_{acc}\left(x,u,\eta_{a}\right)=I_{2\times3}\left(\frac{T}{m}-\mu v_{b/i}^{b}+\beta_{a}+\eta_{a}\right)\label{eq:accel_model}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
The associated Jacobians of 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:pixel_meas_model"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:accel_model"

\end_inset

 are given in Appendix C with the addition of several other, simpler measurement
 models used in this work.
\end_layout

\begin_layout Subsection
Keyframe Reset
\end_layout

\begin_layout Standard
As shown in Wheeler and Koch, performing a 
\begin_inset Quotes eld
\end_inset

Keyframe Reset
\begin_inset Quotes erd
\end_inset

 when global states are unobservable can dramatically improve filter consistency
 and accuracy.
 A keyframe reset is performed by resetting the global position and heading
 states to zero, and updating the covariances appropriately.
 Each reset step results in a new 
\begin_inset Quotes eld
\end_inset

node
\begin_inset Quotes erd
\end_inset

 being declared in a pose graph-like structure in 
\begin_inset Formula $SE\left(2\right)$
\end_inset

 which can be optimized using higher-order methods to properly incorporate
 loop closures and other measurements.
 See Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:keyframe_geometry"

\end_inset

 for an illustration of the coordinate frames involved in the keyframe reset.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/keyframes.eps
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset CommandInset label
LatexCommand label
name "fig:keyframe_geometry"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Keyframe Coordinate Frames
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
While resetting the position states is trivial, resetting rotation about
 
\begin_inset Formula $\k$
\end_inset

 in the attitude quaternion 
\begin_inset Formula $q_{I}^{b}$
\end_inset

 is more complicated.
 In Koch, this reset step was derived using an intermediate euler-angle
 decomposition.
 In this work, we directly update the quaternion, without euler angle calculatio
ns and using manifold operations.
 
\end_layout

\begin_layout Standard
Consider a quaternion 
\begin_inset Formula $q^{-}$
\end_inset

 and unit vector
\begin_inset Formula $u$
\end_inset

.
 We wish to remove all rotation in 
\begin_inset Formula $q^{-}$
\end_inset

 about 
\begin_inset Formula $u$
\end_inset

 and extract a new quaternion 
\begin_inset Formula $q^{+}$
\end_inset

.
 We can do this by rotating 
\begin_inset Formula $u$
\end_inset

 by 
\begin_inset Formula $q^{-}$
\end_inset

, which results in a new vector 
\begin_inset Formula $v$
\end_inset

.
 Because the shortest rotation between these two vectors would have no component
 of rotation about either 
\begin_inset Formula $u$
\end_inset

 or 
\begin_inset Formula $v$
\end_inset

, we can extract 
\begin_inset Formula $q^{+}$
\end_inset

 using the exponential map on an axis-angle parameterization of the difference.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
v & = & R\left(q^{-}\right)^{\top}u\\
\theta & = & u^{\top}v\\
s & = & \left\lfloor u\right\rfloor v\\
q^{+} & = & \exp\left(\theta s\right)
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Using this fact, the actual reset can performed in the manner described
 in Koch: 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
p_{b/n}^{n,+}=\left[\begin{array}{c}
0\\
0\\
\k^{\top}p_{b/n}^{n,-}
\end{array}\right]
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
q_{n}^{b,+}=\exp\left(\k\left(R\left(q_{n}^{b,-}\right)^{\top}\k\right)\left(\skew{\k}R\left(q_{n}^{b,-}\right)^{\top}\k\right)\right)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
P^{+}=NPN^{\top},
\]

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $N$
\end_inset

 is given in Appendix D.
 No reset step is required for feature states, as they are defined with
 respect to the camera frame directly and are therefore not subject to the
 same observability problems as global position and heading.
 If feature states are defined in an inertial frame, which is the case for
 many visual-inertial filtering methods, a keyframe reset is not straight-forwar
d.
 
\end_layout

\begin_layout Subsection
Partial Update
\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\blambda}{\mathbf{\boldsymbol{\lambda}}}
{\boldsymbol{\lambda}}
\end_inset


\end_layout

\begin_layout Standard
A common difficulty faced in visual-inertial navigation is the estimation
 of 
\begin_inset Quotes eld
\end_inset

nuisance
\begin_inset Quotes erd
\end_inset

 states which may only be partially observable during many maneuvers.
 In this filter, these states include the inverse depth to each feature,
 
\begin_inset Formula $\rho_{i}$
\end_inset

, accel and gyro biases 
\begin_inset Formula $\beta_{a}$
\end_inset

 and 
\begin_inset Formula $\beta_{\omega}$
\end_inset

, and the linear drag term 
\begin_inset Formula $\mu$
\end_inset

.
 As noted by Brink, estimating these terms in the traditional manner can
 cause filter divergence, but ignoring them or considering them as known
 constants would produce an overconfident estimate.
 Therefore, because of the abundance of these states in our system, we employ
 a version of the Partial-Update Schmidt-Kalman Filter as proposed by Brink.
 This method allows the designer to 
\begin_inset Quotes eld
\end_inset

dial
\begin_inset Quotes erd
\end_inset

 the effect of a measurement update on a particular state, with a scalar
 gain 
\begin_inset Formula $\gamma_{i}$
\end_inset

.
 While this method loses any guarantees about optimality in estimating these
 states in a kalman filtering framework, In Brink it was shown to speed
 up convergence of these nuisance states by limiting the effect of linearization
 errors when applied to the non-linear IMU-camera estimation problem.
 If we properly map the uncertainty through this partial update, our extended
 kalman filter can remain consistent and not be subject to as severe linearizati
on errors.
 
\end_layout

\begin_layout Standard
In Brink, we are presented with the following form of the update step:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\xhat^{+} & = & \xhat^{-}+K\left(\z-H\xhat^{-}\right)\\
P^{+} & = & \left(I-KH\right)P^{-}\\
\cdots & \cdots & \cdots\\
\hat{x}_{i}^{++} & = & \gamma_{i}\hat{x}_{i}^{-}+\left(1-\gamma_{i}\right)\hat{x}_{i}^{+}\\
P_{ij}^{++} & = & \gamma_{i}\gamma_{j}P_{ij}^{-}+\left(1-\gamma_{i}\gamma_{j}\right)P_{ij}^{-}.
\end{eqnarray*}

\end_inset

The drawback of this formulation is the intermediate calculation of 
\begin_inset Formula $\xhat^{+}$
\end_inset

and 
\begin_inset Formula $P^{+}$
\end_inset

.
 We can manipulate these equations to remove this intermediate calculation,
 but maintain algebraic equivalence.
 Let us first define 
\begin_inset Formula $\lambda_{i}=1-\gamma_{i}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\hat{x}_{i}^{++} & = & \left(1-\lambda_{i}\right)\hat{x}^{-}+\lambda_{i}\hat{x}_{i}^{+}\\
P_{ij}^{++} & = & \left(1-\lambda_{i}\right)\left(1-\lambda_{j}\right)P_{ij}^{-}+\left(1-\left(1-\lambda_{i}\right)\left(1-\lambda_{j}\right)\right)P_{ij}^{+}\\
 & = & \left(1-\lambda_{i}-\lambda_{j}+\lambda_{i}\lambda_{j}\right)P_{ij}^{-}+\left(1-\left(1-\lambda_{i}-\lambda_{j}+\lambda_{i}\lambda_{j}\right)\right)P_{ij}^{+}\\
 & = & 1-\left(\lambda_{i}+\lambda_{j}-\lambda_{i}\lambda_{j}\right)P_{ij}^{-}+\left(1-1+\lambda_{i}+\lambda_{j}-\lambda_{i}\lambda_{j}\right)P_{ij}^{+}\\
 & = & 1-\left(\lambda_{i}+\lambda_{j}-\lambda_{i}\lambda_{j}\right)P_{ij}^{-}+\left(\lambda_{i}+\lambda_{j}-\lambda_{i}\lambda_{j}\right)P_{ij}^{+}\\
 & = & \left(1-\tau_{ij}\right)P_{ij}^{-}+\tau_{ij}P_{ij}^{+}
\end{eqnarray*}

\end_inset

with 
\begin_inset Formula $\tau_{ij}=\left(\lambda_{i}+\lambda_{j}-\lambda_{i}\lambda_{j}\right)$
\end_inset

.
 Next, let us define 
\begin_inset Formula $\boldsymbol{\lambda}=\left[\begin{array}{cccc}
\lambda_{0} & \lambda_{1} & \cdots & \lambda_{n}\end{array}\right]^{\top}$
\end_inset

, 
\begin_inset Formula $\mathbf{1}=\left[\begin{array}{cccc}
1 & 1 & \cdots & 1\end{array}\right]^{\top}$
\end_inset

 and 
\begin_inset Formula $\Lambda=\mathbf{1}\boldsymbol{\lambda}{}^{\top}+\boldsymbol{\lambda}\mathbf{1}^{\top}-\boldsymbol{\lambda}\boldsymbol{\lambda}^{\top}$
\end_inset

 and perform the following manipulations, (where 
\begin_inset Formula $\odot$
\end_inset

 is the Hadamard product)
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\xhat^{++} & = & \left(\mathbf{1}-\boldsymbol{\lambda}\right)\xhat^{-}+\boldsymbol{\lambda}\xhat^{+}\\
 & = & \xhat^{-}-\boldsymbol{\lambda}\left(\xhat^{+}-\xhat^{-}\right)\\
 & = & \xhat^{-}+\boldsymbol{\lambda}\left(K\left(z-H\xhat^{-}\right)\right)\\
\cdots & \cdots & \cdots\\
P^{++} & = & \left(\mathbf{1}\mathbf{1}^{\top}-\Lambda\right)\odot P^{-}+\Lambda\odot P^{+}\\
 & = & P^{-}-\Lambda\odot\left(P^{-}-P^{+}\right)\\
 & = & P^{-}-\Lambda\odot\left(P^{-}-\left(P^{-}+KHP^{-}\right)\right)\\
 & = & P^{-}-\Lambda\odot KHP^{-}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Finally, because our state space operates on a manifold, we must swap the
 relevant vector operators with the 
\begin_inset Formula $\boxplus$
\end_inset

 and 
\begin_inset Formula $\boxminus$
\end_inset

 operators in the state propagation step, which leads us to the final form
 of our update equations without any dependence on intermediate calculations.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\xhat^{++} & = & \xhat^{-}\boxplus\boldsymbol{\lambda}\left(K\left(z\boxminus H\xhat^{-}\right)\right)\\
P^{++} & = & P^{-}-\Lambda\odot KHP^{-}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Section
Implementation
\end_layout

\begin_layout Standard
The filter was implemented on a quadrotor MAV with an Intel i7 Processor
 and 16GB of RAM.
 An ASUS xtion RGB-D camera was used as the visual sensor at 30 fps, and
 IMU measurements were collected from an Invensense MPU6050 IMU at 250 Hz.
 Altitude was measured using a MB1242 ultrasonic sonar.
 The quadrotor was flown in a motion capture room which provided reference
 measurements of attitude and position while reference velocity was calculated
 by post-processing truth measurements.
 A reference for depth estimates was provided using depth sensor on the
 camera.
 All communication for the system was performed using ROS, and ROSflight
 was used as the flight controller.
 Flight was performed manually with a human operator.
\end_layout

\begin_layout Standard
Inverse depth to each feature was initialized using the recommended values
 in [CITE] of 
\begin_inset Formula $\rho_{0}=\nicefrac{1}{2d_{min}}$
\end_inset

 and 
\begin_inset Formula $R_{0}=\nicefrac{1}{16d_{min}}$
\end_inset

 with a minimum distance to each feature assumed to be 
\begin_inset Formula $d_{min}=2$
\end_inset

m.
 Features were tracked using a KLT tracker [CITE] implemented using off-the-shel
f algorithms from OpenCV.
 To deal with negative depth estimates, we used the method in [CITE], where
 any negative depth estimates were immediately re-initialized to 
\begin_inset Formula $d_{min}$
\end_inset

 and the covariance appropriately expanded to account for the additional
 uncertainty.
 Because keyframes are not tied to a specific image in this estimator (as
 opposed to the implementation in Koch) new keyframes were declared after
 more than one half of features present at the declaration of the previous
 keyframe were lost.
 While post-processing was used to compare the different approaches, the
 full system was run in real-time onboard during the data collect.
 The calibration between IMU and camera was performed using a factor graph
 implemented in GTSAM.
\end_layout

\begin_layout Section
Results
\end_layout

\begin_layout Standard
The MAV was flown in a 2 minute trajectory in a faily agressive maneuver
 which excercised forward and lateral translation, change in altitude and
 large yawing motions.
 The results are shown in Figures...
\end_layout

\end_body
\end_document
